// Code generated by go-bindata. DO NOT EDIT.
// sources:
// necker_cube.wts

package main


import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}


type asset struct {
	bytes []byte
	info  fileInfoEx
}

type fileInfoEx interface {
	os.FileInfo
	MD5Checksum() string
}

type bindataFileInfo struct {
	name        string
	size        int64
	mode        os.FileMode
	modTime     time.Time
	md5checksum string
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) MD5Checksum() string {
	return fi.md5checksum
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataNeckercubewts = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\xd5\x5d\x4f\xf2\x30\x14\x07\xf0\xeb\xee\x53\x9c\x9c\xeb\x93\x27\xeb" +
	"\x5e\x61\x77\xe4\x31\x7a\x23\x84\xc8\x85\x17\x84\x8b\x49\x16\xa3\xa8\x24\x73\x6a\x0c\xd9\x77\x37\x7b\x63\x30\x27" +
	"\xa7\xed\x46\x16\x58\xbb\xae\xe7\x97\xa6\xf4\x7f\xb0\x04\x2e\x92\xec\x6b\x9f\xee\x30\x02\x5c\x24\xdb\x5d\x92\xfe" +
	"\xff\x78\x48\x90\x2c\x81\xb7\xf1\x77\x92\xbe\x63\x04\x6b\x4b\x88\x83\x25\x44\xdd\xf5\x7b\xa8\x10\x38\x4f\xb2\xf8" +
	"\x2a\xce\x62\x8c\xa0\x1c\x2a\x70\xb6\xcd\xe6\xb3\xcf\xc7\x62\xb4\xfd\xcf\xf5\xab\x71\x65\xf7\xf2\xb4\xbb\xe8\xcd" +
	"\xab\x39\x96\xe9\xf3\x5b\x53\xaf\xae\x28\x04\x5e\xa7\xfb\xd7\xbe\x92\x7d\x45\x85\xc0\x9b\xd5\x36\x7e\x49\xaa\xe9" +
	"\x65\x50\x7e\x42\xac\x1e\xe6\xcd\x7b\x77\x6d\x95\x63\x9d\xa2\xfb\x09\x23\xb0\xe9\xd8\x5e\x60\x04\xd2\x6f\xdb\xab" +
	"\xe2\xf9\x1a\x24\x81\x43\xe0\x12\x78\x04\x3e\x41\x40\x10\x12\x4c\x08\xa6\x04\xd2\x26\x90\x92\x40\x3a\x04\xd2\x25" +
	"\x90\x1e\x81\xf4\x61\xd3\xce\x71\x9f\x35\x73\x48\x02\xbb\xf9\xbe\x74\xc1\xa6\x7e\xb9\xe1\x77\xc5\x92\x15\xdb\xe3" +
	"\x88\x6d\x45\x34\x2b\x76\x54\xc4\x72\x4c\x31\x83\x66\xc5\xae\xa2\xd8\x19\x24\xae\xe6\x38\x85\xfe\x89\x66\xc5\x9e" +
	"\xba\xd8\x1d\xba\xc6\x47\xeb\xa0\x35\xf6\xb5\xc4\xde\xa0\x35\xb6\x55\x76\x33\x2b\x0e\x74\xc5\xbe\xa1\xb8\x63\x35" +
	"\x17\x87\x06\xe2\xc0\x50\x7c\xca\x35\x17\x4f\xcc\xc4\xa1\xa1\xb8\x73\xf5\x9c\xd3\xac\x78\x6a\x2c\x9e\x8c\x23\xee" +
	"\xee\x13\x3e\x41\xf8\xd0\xbb\x40\x9e\x8e\x28\xae\x6f\x78\xb1\x52\xe8\x71\x49\x6d\x2a\xee\x39\xa7\x79\xb1\x6a\xe8" +
	"\xb1\x49\x6d\xbe\xc6\x67\x74\x5e\xac\x11\x7a\x7c\x52\x9b\xad\xf1\xd9\x0e\xe1\xc5\x7a\xa1\xa7\x90\xd4\x9a\xe2\xee" +
	"\xff\x8f\x17\x6b\x87\x1e\x9b\xd4\xda\xe2\xb3\x73\xba\x15\x57\xbf\x55\xb3\x6c\x14\xb7\xb9\x25\x36\x56\x6e\xfd\x04" +
	"\x00\x00\xff\xff\x55\x84\x09\x49\x39\x0c\x00\x00")

func bindataNeckercubewtsBytes() ([]byte, error) {
	return bindataRead(
		_bindataNeckercubewts,
		"necker_cube.wts",
	)
}



func bindataNeckercubewts() (*asset, error) {
	bytes, err := bindataNeckercubewtsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "necker_cube.wts",
		size: 3129,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1567067564, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}


//
// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
//
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
// nolint: deadcode
//
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

//
// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or could not be loaded.
//
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// AssetNames returns the names of the assets.
// nolint: deadcode
//
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

//
// _bindata is a table, holding each asset generator, mapped to its name.
//
var _bindata = map[string]func() (*asset, error){
	"necker_cube.wts": bindataNeckercubewts,
}

//
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
//
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, &os.PathError{
					Op: "open",
					Path: name,
					Err: os.ErrNotExist,
				}
			}
		}
	}
	if node.Func != nil {
		return nil, &os.PathError{
			Op: "open",
			Path: name,
			Err: os.ErrNotExist,
		}
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}


type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{Func: nil, Children: map[string]*bintree{
	"necker_cube.wts": {Func: bindataNeckercubewts, Children: map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
